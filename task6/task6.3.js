// Решение 3, алгоритм быстрой сортировки

// В языке JavaScript метод sort() использует алгоритм быстрой сортировки (quicksort)
// или сортировку слиянием (merge sort), в зависимости от реализации браузера или движка JavaScript. 

function quickSort(array){ 
   
    // если массив содержит один элемент или пуст, то он уже отсортирован
    if (array.length <= 1) {
        return array;
    }
    
    // выбираем первый элемент массива в качестве опорного
    const pivot = array[0];

    // создаем два новых массива: left и right, которые будут содержать элементы, 
    // меньшие и большие (или равные) опорному элементу
    const left = [];
    const right = [];

    // проходим по остальным элементам массива, начиная с индекса 1
    for (let i = 1; i < array.length; i++) {
        // сравниваем возраст каждого элемента с возрастом опорного элемента
        // если возраст текущего элемента меньше возраста опорного элемента, помещаем его в левый массив
        // если возраст равен, сравниваем их имена
        // если имя текущего элемента меньше имени опорного элемента, также помещаем его в левый массив 
        if (array[i].age < pivot.age || (array[i].age === pivot.age && array[i].name < pivot.name)) {
            left.push(array[i]);
        } else {
            // иначе мы помещаем элемент в правый массив
            right.push(array[i]);
        }
    }

    // Рекурсивно применяем быструю сортировку к левому и правому массивам.
    // Объединяем результаты сортировки левого массива, опорного элемента и результаты сортировки правого массива вместе, возвращая их как один отсортированный массив.
    return [...quickSort(left), pivot, ...quickSort(right)];
}

const objects = [
    { name: 'Bob', age: 26 },
    { name: 'Eva', age: 28 },
    { name: 'David', age: 27 },
    { name: 'Emma', age: 27 },
    { name: 'Hank', age: 33 },
    { name: 'Grace', age: 33 },
];

console.log(quickSort(objects))