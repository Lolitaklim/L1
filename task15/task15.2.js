// Решение 2, выполнение нескольких асинхронных операций параллельно

// асинхронная функция
async function asyncFunc() {
    // ожидание выполнения других асинхронных операций,
    const [result1, result2] = await Promise.all([
        asyncOperation1(),
        asyncOperation2()
    ]);
    // возвращаем результат выполнения
    return `${result1} и ${result2}`;  
}

// асинхронные операции 
function asyncOperation1() {
    // возвращаем промис
    return new Promise((resolve) => {
        // имитация асинхронной операции
        setTimeout(() => {
            console.log('асинхронная операция 1');
            // разрешаем промис
            resolve('асинхронная операция 1 разрешена');
        }, 1500); 
    });
}

function asyncOperation2() {
    return new Promise((resolve) => {
        setTimeout(() => {
            console.log('асинхронная операция 2');
            resolve('асинхронная операция 2 разрешена');
        }, 500);
    });
}

asyncFunc()
    .then((finalResult) => {
        console.log('Результат:', finalResult);
    })


// ситуации, когда использование Promise.all() может быть полезным:

// Зависимость результатов: Если результат одной операции требуется для выполнения другой, 
// ожидать обе операции параллельно, но не начинать выполнение третьей, пока не завершится первая и вторая.

// Оптимизация времени выполнения: В случаях, когда операции могут выполняться параллельно 
// и одна из них длится дольше, чем другая, использование Promise.all() может помочь оптимизировать время выполнения.

// Обработка ошибок: Promise.all() прекратит выполнение и вернет ошибку, 
// если одна из операций завершится с ошибкой.
